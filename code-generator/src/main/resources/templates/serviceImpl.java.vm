package ${package.ServiceImpl};

import ${package.Entity}.${entity};
import ${package.Mapper}.${table.mapperName};
import ${package.Service}.${table.serviceName};
import ${superServiceImplClassPackage};
import com.baomidou.mybatisplus.core.conditions.Wrapper;
import com.baomidou.mybatisplus.core.conditions.query.LambdaQueryWrapper;
import com.baomidou.mybatisplus.extension.plugins.pagination.Page;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.List;
/**
 * <p>
 * $!{table.comment} 服务实现类
 * </p>
 *
 * @author ${author}
 * @since ${date}
 */
@Service
@Transactional(rollbackFor = Exception.class)
#if(${kotlin})
open class ${table.serviceImplName} : ${superServiceImplClass}<${table.mapperName}, ${entity}>(), ${table.serviceName} {

}
#else
public class ${table.serviceImplName} extends ${superServiceImplClass}<${table.mapperName}, ${entity}> implements ${table.serviceName} {

    @Override
    public Page<${entity}> pageQuery(Integer pageNo, Integer pageSize, ${entity} queryModel) {
        Page<${entity}> page = new Page<>();
        Wrapper<${entity}> wrapper = new LambdaQueryWrapper<${entity}>()
                .orderByDesc(${entity}::getUpdateTime);
        return this.page(page,wrapper);
    }

    @Override
    public List<${entity}> findList(${entity} queryModel) {
        Wrapper<${entity}> wrapper = new LambdaQueryWrapper<${entity}>()
                .orderByDesc(${entity}::getUpdateTime);
        return this.list(wrapper);
    }

}
#end
